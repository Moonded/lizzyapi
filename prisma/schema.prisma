// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Deprecated
model User {
  id          String @id @default(cuid())
  user        String
  userid      String @unique
  nexusmods   String
  github      String
  theme       String @default("default")
  description String
  style       String
  timezone    String
  country     String
}


// Deprecated
model Pass {
  id       String  @id @default(cuid())
  username String  @unique
  discord  String? @unique
  token    String
  salt     String
  jwt      String
}

model Trivia {
  id         String   @id @default(cuid())
  question   String
  answer     String
  created_at DateTime @default(now())
}

model Quotes {
  id        String @id @default(cuid())
  quote     String
  responder String @default("everyone")
}

model Github {
  id               String   @id
  red4ext          Json
  archivexl        Json
  tweakxl          Json
  codeware         Json
  cet              Json
  redscript        Json
  created          DateTime @default(now())
  updated          DateTime @default(now())
  lastupdatemanuel Boolean  @default(false)
}

model UserV2 {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  keys         APIKeys[]
  maxkeys      Int            @default(1)
  connection   Connection[]
  linkedroles  LinkedRoles[]
  webinterface WebInterface[]
}

enum Service {
  nexusmods
  github
  discord
}

model Connection {
  id        Int     @id @default(autoincrement())
  UserV2    UserV2? @relation(fields: [userv2id], references: [id])
  userv2id  Int
  service   Service @unique @default(discord)
  username  String
  serviceid String? @unique
}

model APIKeys {
  id         Int     @id @default(autoincrement())
  UserV2     UserV2? @relation(fields: [userv2id], references: [id])
  userv2id   Int
  key        String  @unique
  name       String
  permission BigInt
}

model Permissions {
  id         Int    @id @default(autoincrement())
  permission BigInt @unique
  route      String
  method     String
}

model LinkedRoles {
  id       Int       @id @default(autoincrement())
  UserV2   UserV2?   @relation(fields: [userv2id], references: [id])
  userv2id Int
  name     String
  bool     Boolean?
  num      Int?
  date     DateTime?
}

model WebInterface {
  id                Int     @id @default(autoincrement())
  UserV2            UserV2? @relation(fields: [userv2id], references: [id])
  userv2id          Int
  theme             String  @default("default")
  style             String  @default("default")
  country           String?
  nexusmods         String?
  nexusmodsVerified Boolean @default(false)
  github            String?
  githubVerified    Boolean @default(false)
  description       String?
}

model DiscordAuth {
  id            Int    @id @default(autoincrement())
  userid        String @unique
  access_token  String
  refresh_token String
  expires_at    Int
}
